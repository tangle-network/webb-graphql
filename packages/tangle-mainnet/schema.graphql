type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type HeartBeatCounter @jsonField {
  authorityId: String!
  numberOfHeartBeats: Int!
}

type SourceState @entity {
  id: ID!
  heartBeatCounters: [HeartBeatCounter!]!
  numberOfSessions: Int!
}

type HeartBeat @entity {
  id: ID!

  blockNumber: BigInt!
  session: Session!
  account: Account!
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  index: Int!

  isSigned: Boolean
  signer: Account

  arguments: String
  module: String
  method: String
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  block: Block!
  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type CountryCode @entity {
  id: ID!

  code: String! @index(unique: false)
}

type Account @entity {
  id: ID!
  publicKey: String! @index(unique: true)
  creator: Account
  createdAt: String
  createAtBlock: Block
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  countryCode: CountryCode
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type Session @entity {
  id: ID!
  validators: [SessionValidator!]! @derivedFrom(field: "session")
  blockNumber: BigInt!
  block: Block!
}

type AuthorityUpTime @entity {
  id: ID!
  authorityId: String!
  uptime: Int!
  blockNumber: BigInt!
  sessionNumber: Int!
  totalHeartbeats: Int!
}

# type IdentitySetLog @entity {}

type IdentityClearedLog @entity {
  id: ID!
  account: Account!
  deposit: BigInt!
  blockNumber: BigInt!
}

type IdentityKilledLog @entity {
  id: ID!
  account: Account!
  deposit: BigInt!
  blockNumber: BigInt!
}

type Validator @entity {
  id: ID!
  account: Account!
  authorityId: String! @index(unique: true)
  uptime: Int!
}

type SessionValidator @entity {
  id: ID!
  session: Session!
  validator: Validator!
  isBest: Boolean!
  isNext: Boolean!
  isNextBest: Boolean!
  bestOrder: Int!
  nextBestOrder: Int!
  reputation: Int!
  uptime: Int!
  blockNumber: BigInt!
}

enum JobType {
  DKGTSSPhaseOne
  DKGTSSPhaseTwo
  ZkSaaSPhaseOne
  ZkSaaSPhaseTwo
}

type JobSubmission @entity {
  id: ID!
  jobKey: String!
  expiryBlockNumber: BigInt!
  jobType: JobType!
  blockNumber: BigInt!
}

type DKGTSSPhaseOneJob @entity {
  id: ID!
  participants: [String!]!
  threshold: Int!
  permittedCaller: Account
}

type DKGTSSPhaseTwoJob @entity {
  id: ID!
  phaseOneId: Int!
  submission: [BigInt]!
}

enum ZkSaaSSystemType {
  Groth16
}

enum ZkSaaSPhaseTwoRequestType {
  Groth16
}

type ZkSaaSPhaseOneJob @entity {
  id: ID!
  participants: [String!]!
  permittedCaller: Account
  system: ZkSaaSSystemType!
}

type ZkSaaSPhaseTwoJob @entity {
  id: ID!
  phaseOneId: Int!
  request: ZkSaaSPhaseTwoRequestType!
}

type JobSubmitted @entity {
  id: ID!
  jobKey: JobType!
  blockNumber: BigInt!
}

type ValidatorRewardLog @entity {
  id: ID!
  account: Account!
  reward: BigInt!
  blockNumber: BigInt!
}

enum RoleType {
  Tss
  ZkSaaS
}

type Profile @entity {
  id: ID!
  account: Account!
  totalProfileResets: BigInt!
  roles: [RoleType!]!
}

type PendingJob @jsonField {
  jobId: String!
  jobKey: String!
}

type PendingJobsLog @entity {
  id: ID!
  pendingJobs: [PendingJob!]!
  blockNumber: BigInt!
}
