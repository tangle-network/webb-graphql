type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type HeartBeatCounter @jsonField {
  authorityId: String!
  numberOfHeartBeats: Int!
}

type SourceState @entity {
  id: ID!
  heartBeatCounters: [HeartBeatCounter!]!
  numberOfSessions: Int!
}

type HeartBeat @entity {
  id: ID!
  blockNumber: BigInt!
  session: Session!
  identityId: String!
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  index: Int!

  isSigned: Boolean
  signerId: String

  arguments: String
  module: String
  method: String
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  block: Block!
  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type Session @entity {
  id: ID!
  validators: [SessionValidator!]! @derivedFrom(field: "session")
  blockNumber: BigInt!
  block: Block!
}

type AuthorityUpTime @entity {
  id: ID!
  authorityId: String!
  uptime: Int!
  blockNumber: BigInt!
  sessionNumber: Int!
  totalHeartbeats: Int!
}

type SessionValidator @entity {
  id: ID!
  session: Session!
  validator: Validator!
  uptime: Int!
  blockNumber: BigInt!
}

type Validator @entity {
  id: ID!
  identity: String!
  authorityId: String! @index(unique: true)
  uptime: Int!
}

type CountryCode @entity {
  id: ID!
  code: String! @index(unique: false)
}

type Identity @entity {
  id: ID!
  publicKey: String! @index(unique: true)
  creatorId: String
  createdAt: Date
  createAtBlock: Block
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  countryCode: CountryCode
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

enum RoleType {
  Tss
  ZkSaaS
  LightClientRelaying
}

type Phase1Job @entity {
  id: ID!
  roleType: RoleType!
  # the specific type based on roleType
  roleSpecificType: String
  participants: [String!]
  threshold: Int
  permittedCaller: String
  numOfJobs: Int
  earnings: Int # for each participant
  creationBlockNumber: BigInt!
  # The maximum allowed submission time for a job result.
  expiryBlockNumber: BigInt!
  # The time-to-live (TTL) for the job, which determines the maximum allowed time for this job to be available.
  ttlBlockNumber: BigInt!
  createdAt: Date!
  endAt: Date!
  isResultSubmitted: Boolean!
}

type SubPhase1Job @entity {
  id: ID!
  phase1JobId: String!
  txHash: String!
  timestamp: Date!
  blockNumber: BigInt!
}

type ValidatorReward @entity {
  id: ID!
  identityId: String!
  reward: BigInt!
  blockNumber: BigInt!
}

type ClaimSource @jsonField {
  evm: String
  native: String
}

type Claim @entity {
  id: ID!
  recipient: String!
  source: ClaimSource!
  amount: BigInt!
  blockNumber: BigInt!
}
