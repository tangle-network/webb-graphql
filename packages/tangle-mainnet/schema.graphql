type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type HeartBeatCounter @jsonField {
  authorityId: String!
  numberOfHeartBeats: Int!
}

type SourceState @entity {
  id: ID!
  heartBeatCounters: [HeartBeatCounter!]!
  numberOfSessions: Int!
}

type HeartBeat @entity {
  id: ID!
  blockNumber: BigInt!
  session: Session!
  accountId: String!
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!
  blockNumber: BigInt! @index(unique: false)
  index: Int!

  isSigned: Boolean
  signerId: String

  arguments: String
  module: String
  method: String
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  block: Block!
  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type CountryCode @entity {
  id: ID!

  code: String! @index(unique: false)
}

type Account @entity {
  id: ID!
  publicKey: String! @index(unique: true)
  creatorId: String
  createdAt: Date
  createAtBlock: Block
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  countryCode: CountryCode
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type Session @entity {
  id: ID!
  validators: [SessionValidator!]! @derivedFrom(field: "session")
  blockNumber: BigInt!
  block: Block!
}

type AuthorityUpTime @entity {
  id: ID!
  authorityId: String!
  uptime: Int!
  blockNumber: BigInt!
  sessionNumber: Int!
  totalHeartbeats: Int!
}

type IdentitySetLog @entity {
  id: ID!
  accountId: String!
  blockNumber: BigInt!
}

type IdentityClearedLog @entity {
  id: ID!
  accountId: String!
  deposit: BigInt!
  blockNumber: BigInt!
}

type IdentityKilledLog @entity {
  id: ID!
  accountId: String!
  deposit: BigInt!
  blockNumber: BigInt!
}

type Validator @entity {
  id: ID!
  accountId: String!
  authorityId: String! @index(unique: true)
  uptime: Int!
}

type SessionValidator @entity {
  id: ID!
  session: Session!
  validator: Validator!
  uptime: Int!
  blockNumber: BigInt!
}

enum JobType {
  DKGTSSPhaseOne
  DKGTSSPhaseTwo
  ZkSaaSPhaseOne
  ZkSaaSPhaseTwo
}

enum JobKey {
  DKG
  DKGSignature
  ZkSaaSCircuit
  ZkSaaSProve
}

type Job @entity {
  id: ID!
  jobKey: JobKey!
  expiryBlockNumber: BigInt!
  createAtBlock: BigInt!
  jobType: JobType
  isResultSubmitted: Boolean!
}

type JobResultSubmittedLog @entity {
  id: ID!
  jobId: String! @index(unique: true)
  jobKey: JobKey!
  blockNumber: BigInt!
}

enum DkgKeyType {
  Ecdsa
  Schnorr
}

type DKGTSSPhaseOneJob @entity {
  id: ID!
  participants: [String!]!
  threshold: Int!
  permittedCallerId: String
  keyType: DkgKeyType!
}

type DKGTSSPhaseTwoJob @entity {
  id: ID!
  phaseOneId: Int!
  submission: [Int]!
}

type HyperData @jsonField {
  raw: String
  ipfs: String
  http: String
}

type Groth16System @jsonField {
  circuit: HyperData!
  numInputs: Int!
  numConstraints: Int!
  provingKey: HyperData!
  verifyingKey: String!
  wasm: HyperData!
}

type ZkSaaSPhaseOneJobSystem @jsonField {
  groth16: Groth16System
}

type ZkSaaSPhaseOneJob @entity {
  id: ID!
  participants: [String!]!
  permittedCallerId: String
  system: ZkSaaSPhaseOneJobSystem!
}

type QAPShare @jsonField {
  a: HyperData!
  b: HyperData!
  c: HyperData!
}

type Groth16ProveRequest @jsonField {
  publicInput: String!
  aShares: [HyperData!]!
  axShares: [HyperData!]!
  qapShares: QAPShare
}

type ZkSaaSPhaseTwoJobRequest @jsonField {
  groth16: Groth16ProveRequest
}

type ZkSaaSPhaseTwoJob @entity {
  id: ID!
  phaseOneId: Int!
  request: ZkSaaSPhaseTwoJobRequest!
}

type ValidatorRewardLog @entity {
  id: ID!
  accountId: String!
  reward: BigInt!
  blockNumber: BigInt!
}

enum RoleType {
  Tss
  ZkSaaS
}

type Profile @entity {
  id: ID!
  accountId: String!
  totalProfileResets: BigInt!
  roles: [RoleType!]!
}

type PendingJob @jsonField {
  jobId: String!
  jobKey: String!
}

type PendingJobsLog @entity {
  id: ID!
  pendingJobs: [PendingJob!]!
  blockNumber: BigInt!
}

type ClaimSource @jsonField {
  evm: String
  native: String
}

type Claim @entity {
  id: ID!
  recipient: String!
  source: ClaimSource!
  amount: BigInt!
  blockNumber: BigInt!
}
