# Read more about how to define entities in The Graph docs
# https://thegraph.com/docs/en/developing/creating-a-subgraph/#the-graphql-schema

type EdgeAddition @entity(immutable: true) {
  id: Bytes!
  chainID: BigInt! # uint256
  latestLeafIndex: BigInt! # uint256
  merkleRoot: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type EdgeUpdate @entity(immutable: true) {
  id: Bytes!
  chainID: BigInt! # uint256
  latestLeafIndex: BigInt! # uint256
  merkleRoot: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Insertion @entity(immutable: true) {
  id: Bytes!
  commitment: BigInt! # uint256
  leafIndex: BigInt! # uint32
  timestamp: BigInt! # uint256
  newMerkleRoot: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewCommitment @entity(immutable: true) {
  id: Bytes!
  commitment: BigInt! # uint256
  subTreeIndex: BigInt! # uint256
  leafIndex: BigInt! # uint256
  encryptedOutput: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewNullifier @entity(immutable: true) {
  id: Bytes!
  nullifier: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PublicKey @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  key: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

# The ERC20 Token entity
type Token @entity {
  id: Bytes!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

type ExternalData @entity(immutable: true) {
  id: Bytes!
  recipient: Bytes! # address
  extAmount: BigInt! # int256
  relayer: Bytes! # address
  fee: BigInt! # uint256
  refund: BigInt! # uint256
  token: String! # address
}

type PublicInputs @entity(immutable: true) {
  id: Bytes!
  roots: Bytes! # bytes
  extensionRoots: Bytes! # bytes
  inputNullifiers: [BigInt!]! # uint256[]
  outputCommitments: [BigInt!]! # uint256[2]
  publicAmount: BigInt! # uint256
  extDataHash: BigInt! # uint256
}

type Encryptions @entity(immutable: true) {
  id: Bytes!
  encryptedOutput1: Bytes! # bytes
  encryptedOutput2: Bytes! # bytes
}

type ShieldedTransaction @entity(immutable: true) {
  id: Bytes!
  vanchor: Bytes! # address
  sender: Bytes! # address
  value: BigInt! # uint256
  proof: Bytes! # bytes
  auxPublicInputs: Bytes! # bytes
  externalData: ExternalData! # ExternalData
  publicInputs: PublicInputs! # PublicInputs
  encryptions: Encryptions! # Encryptions
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  addresses: [VAnchorAddress!]!
}

type VAnchorTotalValueLocked @entity(immutable: false) {
  id: String! # vAnchor address
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTotalValueLockedByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTotalValueLockedEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTotalValueLockedByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTotalValueLockedEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTotalValueLockedByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalValueLocked: BigInt! # total value locked in the vAnchor
}

type VAnchorTWL @entity(immutable: false) {
  id: String! # vAnchor address
  total: BigInt! # twl in the vAnchor
}

type VAnchorTWLByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  total: BigInt! # twl in the vAnchor
}

type VAnchorTWLEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  total: BigInt! # twl in the vAnchor
}

type VAnchorTWLByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  total: BigInt! # twl in the vAnchor
}

type VAnchorTWLEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  total: BigInt! # twl in the vAnchor
}

type VAnchorTWLByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  total: BigInt! # twl in the vAnchor
}

type VAnchorRelayerFee @entity(immutable: false) {
  id: String! # vAnchor address
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorRelayerFeeByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  tokenAddress: Bytes! # address
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorRelayerFeeEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorRelayerFeeByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorRelayerFeeEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorRelayerFeeByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  totalFees: BigInt! # Total Fees (txFee + relayerProfit)
  txFees: BigInt! # Network Fees
  profit: BigInt! # Relayer's Profit
}

type VAnchorWrappingFee @entity(immutable: false) {
  id: String! # vAnchor address
  fees: BigInt! # total wrapping fee in the vAnchor
}

type VAnchorWrappingFeeByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  tokenAddress: Bytes! # address
  fees: BigInt! # total wrapping fee in the vAnchor
}

type VAnchorWrappingFeeEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  fees: BigInt! # total wrapping fee in the vAnchor
}

type VAnchorWrappingFeeByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  fees: BigInt! # total wrapping fee in the vAnchor
}

type VAnchorWrappingFeeEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  fees: BigInt! # total wrapping fee in the vAnchor
}

type VAnchorWrappingFeeByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  fees: BigInt! # total wrapping fee in the vAnchor
}

type WrappingEventLog @entity(immutable: true) {
  id: String! # time index-vanchor address
  sender: Bytes! # address
  recipient: Bytes! # address
  tokenAddress: Bytes! # token address
  wrappingFee: BigInt! # fees to wrap
  afterFeeAmount: BigInt! # amount minus fees
  timestamp: BigInt! # block timestamp
}

type UnwrappingEventLog @entity(immutable: true) {
  id: String! # time index-vanchor address
  sender: Bytes! # address
  recipient: Bytes! # address
  tokenAddress: Bytes! # token address
  amount: BigInt! # amount of token
  timestamp: BigInt! # block timestamp
}

type VAnchorWithdrawalLog @entity(immutable: true) {
  id: String! # tx hash
  withdrawal: BigInt! # withdrawal in theis log.
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  timestamp: BigInt! # block timestamp
}

type VAnchorWithdrawal @entity(immutable: false) {
  id: String! # vAnchor address
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorWithdrawalByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorWithdrawalEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorWithdrawalByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorWithdrawalEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorWithdrawalByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  withdrawal: BigInt! # withdrawal in the vAnchor
  averageWithdrawal: BigInt! # average withdrawal in the vAnchor
  totalCount: BigInt! # total count of withdrawal
}

type VAnchorDeposit @entity(immutable: false) {
  id: String! # vAnchor address
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  deposit: BigInt! # Deposit in the vAnchor
  averageDeposit: BigInt! # average deposit in the vAnchor
  totalCount: BigInt! # total count of deposit
}

type VAnchorDepositLog @entity(immutable: true) {
  id: String! # tx hash
  deposit: BigInt! # withdrawal in theis log.
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  timestamp: BigInt! # block timestamp
}

type VAnchorTransferLog @entity(immutable: true) {
  id: String! # tx hash
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  timestamp: BigInt! # block timestamp
}

type VAnchorTransactionLog @entity(immutable: true) {
  id: String! # tx hash
  amount: BigInt!
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  timestamp: BigInt! # block timestamp
}

type VAnchorVolume @entity(immutable: false) {
  id: String! # vAnchor address
  volume: BigInt! # total value locked in the vAnchor
}

type VAnchorVolumeByToken @entity(immutable: false) {
  id: String! # vAnchor address + token address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  volume: BigInt!
}

type VAnchorVolumeEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  volume: BigInt!
}

type VAnchorVolumeByTokenEvery15Min @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  volume: BigInt!
}

type VAnchorVolumeEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  volume: BigInt!
}

type VAnchorVolumeByTokenEveryDay @entity(immutable: false) {
  id: String! # time index-vanchor address
  vAnchorAddress: Bytes! # address
  tokenAddress: Bytes! # address
  tokenSymbol: String! # token symbol
  startInterval: BigInt! # start time of the interval
  endInterval: BigInt! # end time of the interval
  volume: BigInt!
}

enum VAnchorAddressType {
  "User is the one who make the desposit transactions, check by msg.sender on deposit transaction"
  User

  "Relayer is the one who relay the withdraw and transfer transactions to the network, check by msg.sender === extData.relayer on withdraw and transfer transactions"
  Relayer
}

type VAnchorAddress @entity(immutable: false) {
  "The actual address in lowercase"
  id: Bytes!

  "The address type, can be User or Relayer"
  type: [VAnchorAddressType!]!

  "The shielded transactions that this address is involved in"
  transactions: [ShieldedTransaction!]! @derivedFrom(field: "addresses")
}
