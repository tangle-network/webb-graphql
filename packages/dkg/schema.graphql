type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type HeartBeatCounter @jsonField {
  authorityId: String!
  numberOfHeartBeats: Int!
}
type SourceState @entity {
  id: ID!
  heartBeatCounters: [HeartBeatCounter!]!
  numberOfSessions: Int!
}
type HeartBeat @entity {
  id: ID!

  blockNumber: BigInt!
  session: Session!
  account: Account!
}
type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  isSigned: Boolean
  signer: Account
  arguments: String

  module: String
  method: String

  index: Int!
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  index: Int!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}
type CountryCode @entity {
  id: ID!

  code: String! @index(unique: false)
}
type Account @entity {
  id: ID!

  creator: Account
  createdAt: String
  createAtBlock: Block
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  countryCode: CountryCode
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type SignatureThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type KeygenThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type Authorities @entity {
  id: ID!

  # AccountId 32 bytes
  current: [String]
  # AccountId 32 bytes
  next: [String]

  block: Block!
}
enum ThresholdVariant {
  SIGNATURE
  PROPOSER
  KEY_GEN
}
type Threshold @entity {
  id: ID!
  next: Int!
  current: Int!
  pending: Int!

  session: Session!
  variant: ThresholdVariant!
}

type Validator @entity {
  id: ID!
  account: Account!
  authorityId: String! @index(unique: true)
}
type Proposer @entity {
  id: ID!

  account: Account!
}

enum SessionKeyStatus {
  Generated
  Signed
  Rotated
}
type SessionKeyHistory @jsonField {
  # SessionKeyStatus
  stage: String!
  txHash: String!
  blockNumber: String!
  timestamp: Date!
}
type SessionPublicKey @jsonField {
  compressedKey: String!
  history: [SessionKeyHistory]!
}

type SessionValidator @entity {
  id: ID!
  session: Session!
  validator: Validator!
  isBest: Boolean!
  isNext: Boolean!
  isNextBest: Boolean!
  bestOrder: Int!
  nextBestOrder: Int!
  reputation: Int!
  uptime: Int!
  blockNumber: BigInt!
}
type SessionProposer @entity {
  id: ID!
  session: Session!
  proposer: Proposer!
}

type Session @entity {
  id: ID!

  publicKey: PublicKey

  blockNumber: Int!
  block: Block!
}

type PublicKey @entity {
  id: ID!

  # Public key bytes 33 bytes
  compressed: String

  history: [SessionKeyHistory]!

  block: Block!
}

type ProposerThreshold @entity {
  id: ID!

  # Number of voters for a proposal to execute
  value: Int

  block: Block!
}

enum ProposalType {
  Refresh
  Evm
  AnchorCreate
  AnchorUpdate
  TokenAdd
  TokenRemove
  WrappingFeeUpdate
  ResourceIdUpdate
  RescueTokens
  MaxDepositLimitUpdate
  MinWithdrawalLimitUpdate
  SetVerifier
  SetTreasuryHandler
  FeeRecipientUpdate
}

enum ProposalBatchStatus {
  Unknown
  Expired
  Signed
  Removed
}

enum ProposalVoteType {
  For
  Against
  Abstain
}

enum ProposalTimelineStatus {
  Approved
  Rejected
  Succeeded
  Failed
}

enum Chain {
  Unknown
  None
  Evm
  Substrate
  PolkadotParachain
  KusamaParachain
  RococoParachain
  Cosmos
  Solana
  Ink
}

type ProposalTimeline @jsonField {
  status: String! # ProposalTimelineStatus
  timestamp: Date!
}

type ProposalProposerWithVote @jsonField {
  proposer: String!
  vote: String! # ProposalVoteType
}

type ProposalInABatch @jsonField {
  kind: String!
  data: Int!
}

type Proposal @entity {
  id: ID!
  blockNumber: String!
  timestamp: Date!
  type: ProposalType!
  data: String!
  timeline: [ProposalTimeline]
  proposersWithVotes: [ProposalProposerWithVote]
}

type ProposalBatch @entity {
  id: ID!
  blockNumber: String!
  timestamp: Date!
  status: ProposalBatchStatus!
  proposals: [ProposalInABatch]!
  chain: Chain!
}
