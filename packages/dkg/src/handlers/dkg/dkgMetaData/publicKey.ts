import { Extrinsic, PublicKey, SessionKeyStatus } from '../../../types';
import { DKGSections } from '../type';

/**
 * Public key for a given session
 *
 * -> The key is generated by the DKG, and `NextPublicKeySubmitted` event is emitted => Generated
 * -> The key is signed by the DKG, and `NextPublicKeySignatureSubmitted` event is emitted  => Signed
 * -> The key is in use in the session, and `PublicKeyChanged` event is emitted => Rotated
 * -> The key is signed by the DKG, and `PublicKeySignatureChanged` event is emitted => Rotated
 *
 * */

export type PublicKeyInput = {
  blockNumber: string;
  compressed: string;
  uncompressed: string;
};

type PublicKeyGenerated = {
  composedPubKey: string;
  blockNumber: string;
  timestamp: Date;
};

export async function ensureKey(data: PublicKeyGenerated) {
  const key = await PublicKey.get(data.composedPubKey);
  if (key) {
    return key;
  }
  const extrinsics = await Extrinsic.getByBlockId(data.blockNumber);
  const matcheExtrinsic = extrinsics.find((ex) => {
    return (
      ex.module === DKGSections.DKGMetaData &&
      ex.method === 'submitNextPublicKey' &&
      ex.arguments.indexOf(data.composedPubKey) > -1
    );
  });
  let txHash = '';
  if (matcheExtrinsic) {
    txHash = matcheExtrinsic.hash;
  }
  const newKey = PublicKey.create({
    blockId: data.blockNumber,
    id: data.composedPubKey,
    compressed: data.composedPubKey,
    history: [
      {
        stage: SessionKeyStatus.Generated,
        blockNumber: data.blockNumber,
        txHash,
        timestamp: data.timestamp,
      },
    ],
  });
  await newKey.save();
  return newKey;
}

export async function keyGenerated(data: PublicKeyGenerated) {
  return ensureKey(data);
}

export type PublicKeyUpdate = {
  blockNumber: string;
  composedPubKey: string;
  status: SessionKeyStatus;
  timestamp: Date;
};

export async function updatePublicKeyStatus({ status, ...data }: PublicKeyUpdate) {
  const key = await ensureKey(data);
  key.history.push({
    stage: status.toString(),
    blockNumber: data.blockNumber,
    txHash: '',
    timestamp: data.timestamp,
  });
  await key.save();
  return key;
}
