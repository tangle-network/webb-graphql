type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  isSigned: Boolean
  signer: Account
  arguments: String

  module: String
  method: String

  index: Int!
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  index: Int!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  creator: Account
  createdAt: String
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type SignatureThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type KeygenThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type Authorities @entity {
  id: ID!

  # AccountId 32 bytes
  current: [String]
  # AccountId 32 bytes
  next: [String]

  block: Block!
}

type Threshold @jsonField {
  next: Int!
  current: Int!
  pending: Int!
}
type DKGAuthority @jsonField {
  # Authority id
  authorityId: String!
  # Authority account 32
  accountId: String!
  reputation: String
}

type SessionKeyHistory @jsonField {
  stage: String!
  txHash: String!
  blockNumber: String!
}
type SessionPublicKey @jsonField {
  compressedKey: String!
  uncompressedKey: String!
  history: [SessionKeyHistory]!
}
type Session @entity {
  id: ID!

  bestAuthorities: [DKGAuthority]!
  nextBestAuthorities: [DKGAuthority]!
  authorities: [DKGAuthority]!
  nextAuthorities: [DKGAuthority]!

  proposers: [String]!
  proposersCount: Int

  key: SessionPublicKey!

  signatureThreshold: Threshold
  proposerThreshold: Threshold
  keyGenThreshold: Threshold

  blockNumber: Int!
  block: Block!
}

type PublicKey @entity {
  id: ID!

  # Public key bytes 33 bytes
  compressed: String

  # Public key bytes 65 bytes
  uncompressed: String

  block: Block!
}

type ProposerThreshold @entity {
  id: ID!

  # Number of voters for a proposal to execute
  value: Int

  block: Block!
}

type Proposers @entity {
  id: ID!

  # Number of proposers in set
  count: Int!
  proposers: [String!]!

  block: Block!
}

enum ProposalType {
  EvmProposal
  RefreshVote
  ProposerSetUpdateProposal
  AnchorCreateProposal
  AnchorUpdateProposal
  TokenAddProposal
  TokenRemoveProposal
  WrappingFeeUpdateProposal
  ResourceIdUpdateProposal
  RescueTokensProposal
  MaxDepositLimitUpdateProposal
  MinWithdrawalLimitUpdateProposal
  SetVerifierProposal
  SetTreasuryHandlerProposal
  FeeRecipientUpdateProposal
}
enum ProposalStatus {
  Singed
  Open
  Rejected
  Accepted
}

type ProposalTimelineStatus @jsonField {
  # ProposalStatus
  status: String!
  txHash: String!
  blockNumber: String!
}

type ProposalVotes @jsonField {
  for: Int!
  against: Int!
  forVoters: [String]!
  againstVoters: [String]!
}

type ProposalItem @entity {
  id: ID!

  proposalId: String! @index(unique: false)

  type: ProposalType!
  timeline: [ProposalTimelineStatus]!
  votes: ProposalVotes!

  data: String!
  signature: String
  removed: Boolean
  nonce: Int!

  block: Block!
}

type ProposalTypeCount @jsonField {
  # ProposalType
  type: String!
  # Proposal status : Accepted, Rejected, Open
  status: String!
  count: String!
  proposalId: [String!]!
}

type ProposalCounter @entity {
  id: ID!

  signedProposalsCount: Int!
  unSignedProposalsCount: Int!
  signedProposalsMap: [ProposalTypeCount]
  unSignedProposalsMap: [ProposalTypeCount]

  blockNumber: Int!
  block: Block!
}
