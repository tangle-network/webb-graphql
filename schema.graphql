type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block
  blockNumber: BigInt! @index(unique: false)
  isSigned: Boolean
  signer: Account
  arguments: String

  section: String # Module name
  method: String # Method name of module
  index: Int!
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  index: Int!
  block: Block
  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  section: String # Module name
  method: String # Method name of module
  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  creator: Account
  createdAt: String
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type Timeline @jsonField {
  status: String
  extrinsic: String
  timestamp: Date
}

type Proposal @entity {
  id: ID!

  propIndex: Int! @index(unique: true)
  deposit: BigInt
  author: String

  preimage: String
  timeline: [Timeline]
}

type Referendum @entity {
  id: ID!

  refIndex: Int! @index(unique: true)
  threshold: String
  timeline: [Timeline]
  executed: Boolean
}
