type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block
  blockNumber: BigInt! @index(unique: false)
  isSigned: Boolean
  signer: Account
  arguments: String

  module: String
  method: String

  index: Int!
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  index: Int!
  block: Block
  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  creator: Account
  createdAt: String
  createAtBlock: Block

  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type SignatureThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block
}

type KeygenThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block
}

type Authorities @entity {
  id: ID!

  current: [String]
  next: [String]

  block: Block
}

type PublicKey @entity {
  id: ID!

  compressed: String
  uncompressed: String

  block: Block
}

type ProposerThreshold @entity {
  id: ID!

  value: Int

  block: Block
}

type Session @entity {
	  id: ID!

  index: Int!
  keygenThreshold: KeygenThreshold
  proposerThreshold: ProposerThreshold
  signatureThreshold: SignatureThreshold
  authorities: [Authorities]
  publicKeys: [PublicKey]
}

enum PropsalType {
Refresh,
ProposerSetUpdate,
EVM,
Anchorcreate,
AnchorUpdate,
TokenAdd,
TokenRemove,
WrappingFeeUpdate,
ResourceIdUpdate,
RescueTokens,
MaxDepositLimitUpdate,
MinWithdrawalLimitUpdate,
SetVerifier,
SetTreasuryHandler,
FeeRecipientUpdate
}


type Proposal @entity {
	id: ID!
	type :PropsalType!
	isSigned: Boolean
	isUnsigned: Boolean
}
