type Block @entity {
  id: ID!

  number: BigInt! @index(unique: true)
  hash: String
  timestamp: Date
  parentHash: String
  specVersion: String
  stateRoot: String
  extrinsicsRoot: String

  extrinsics: [Extrinsic] @derivedFrom(field: "block")
  events: [Event] @derivedFrom(field: "block")
}

type Extrinsic @entity {
  id: ID!

  hash: String!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  isSigned: Boolean
  signer: Account
  arguments: String

  module: String
  method: String

  index: Int!
  isSuccess: Boolean
}

type Event @entity {
  id: ID!

  index: Int!
  block: Block!

  blockNumber: BigInt! @index(unique: false)
  timestamp: Date

  module: String
  method: String

  docs: String
  arguments: String
  data: String
  extrinsic: Extrinsic
}

type Account @entity {
  id: ID!

  creator: Account
  createdAt: String
  createAtBlock: Block
  display: String
  legal: String
  web: String
  riot: String
  email: String
  pgpFingerprint: String
  image: String
  twitter: String
  countryCode: String
  extrinsics: [Extrinsic] @derivedFrom(field: "signer")
}

type SignatureThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type KeygenThreshold @entity {
  id: ID!

  current: Int
  pending: Int
  next: Int

  block: Block!
}

type Authorities @entity {
  id: ID!

  # AccountId 32 bytes
  current: [String]
  # AccountId 32 bytes
  next: [String]

  block: Block!
}

type Threshold @jsonField {
  next: Int!
  current: Int!
  pending: Int!
}

type Validator @entity {
  id: ID!
  account: Account!
  authorityId: String! @index(unique: true)
}
type Proposer @entity {
  id: ID!

  account: Account!
  votes: [ProposalVote]! @derivedFrom(field: "voter")
}

enum SessionKeyStatus {
  Generated
  Signed
  Rotated
}
type SessionKeyHistory @jsonField {
  # SessionKeyStatus
  stage: String!
  txHash: String!
  blockNumber: String!
  timestamp: Date!
}
type SessionPublicKey @jsonField {
  compressedKey: String!
  uncompressedKey: String!
  history: [SessionKeyHistory]!
}

type SessionValidator @entity {
  id: ID!
  session: Session!
  validator: Validator!
  isBest: Boolean!
  isNext: Boolean!
  isNextBest: Boolean!
  bestOrder: Int!
  nextBestOrder: Int!
  reputation: String!
}
type SessionProposer @entity {
  id: ID!
  session: Session!
  proposer: Proposer!
}

type Session @entity {
  id: ID!

  publicKey: PublicKey

  signatureThreshold: Threshold
  proposerThreshold: Threshold
  keyGenThreshold: Threshold

  blockNumber: Int!
  block: Block!
}

type PublicKey @entity {
  id: ID!

  # Public key bytes 33 bytes
  compressed: String

  # Public key bytes 65 bytes
  uncompressed: String @index(unique: true)

  history: [SessionKeyHistory]!

  block: Block!
}

type ProposerThreshold @entity {
  id: ID!

  # Number of voters for a proposal to execute
  value: Int

  block: Block!
}

enum ProposalType {
  Unknown
  EvmProposal
  RefreshVote
  ProposerSetUpdateProposal
  AnchorCreateProposal
  AnchorUpdateProposal
  TokenAddProposal
  TokenRemoveProposal
  WrappingFeeUpdateProposal
  ResourceIdUpdateProposal
  RescueTokensProposal
  MaxDepositLimitUpdateProposal
  MinWithdrawalLimitUpdateProposal
  SetVerifierProposal
  SetTreasuryHandlerProposal
  FeeRecipientUpdateProposal
}
enum ProposalStatus {
  Signed
  Open
  Rejected
  Accepted
  Removed
  Executed
  FailedToExecute
}

type ProposalTimelineStatus @entity {
  id: ID!
  # ProposalStatus
  status: ProposalStatus!
  txHash: String
  blockNumber: BigInt!
  proposalItem: ProposalItem!

  timestamp: Date!
}
enum VoteType {
  FOR
  AGAINST
  ABSTAIN
}

type ProposalVote @entity {
  id: ID!
  voteStatus: VoteType!
  voter: Proposer!
  proposal: ProposalItem!
  blockNumber: BigInt!
  block: Block!
}

type ProposalItem @entity {
  # Nonce
  id: ID!

  nonce: Int!
  chainId: Int
  type: ProposalType!

  status: String! @index(unique: false)

  data: String!
  signature: String
  removed: Boolean

  blockNumber: Int!

  block: Block!
}

type ProposalTypeCount @jsonField {
  # ProposalType
  type: String!

  count: String!
  proposalId: [String!]!
}
type ProposalStatusCount @jsonField {
  # Proposal status : Accepted, Rejected, Open
  status: String!
  count: String!
  proposalId: [String!]!
}

type UnsignedProposalsQueueItem @entity {
  id: ID!
  proposal: ProposalItem!
  queue: UnsignedProposalsQueue!

  blockNumber: Int!
}

type UnsignedProposalsQueue @entity {
  id: ID!
  block: Block!
  blockNumber: Int!
}

type ProposalCounter @entity {
  id: ID!

  signedProposalsCount: Int!
  unSignedProposalsCount: Int!
  signedProposalsMap: [ProposalTypeCount]
  unSignedProposalsMap: [ProposalTypeCount]
  statusMap: [ProposalStatusCount]
  blockNumber: Int!
  block: Block!
}
